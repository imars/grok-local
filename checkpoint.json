{
    "description": "Including safe/ files in snapshot",
    "timestamp": "2025-02-27T06:14:42.749997",
    "files": {
        "grok_local.py": "import os\nimport sys\nimport argparse\nimport datetime\nimport logging\nimport json\nfrom logging.handlers import RotatingFileHandler\nfrom file_ops import create_file, delete_file, move_file, copy_file, read_file, write_file, list_files, rename_file\nfrom git_ops import git_status, git_pull, git_log, git_branch, git_checkout, git_commit_and_push, git_rm\n\nPROJECT_DIR = os.getcwd()\nLOG_FILE = os.path.join(PROJECT_DIR, \"grok_local.log\")\nCHECKPOINT_FILE = os.path.join(PROJECT_DIR, \"checkpoint.json\")\nSAFE_DIR = os.path.join(PROJECT_DIR, \"safe\")\n\n# Setup logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(levelname)s - %(message)s\",\n    handlers=[RotatingFileHandler(LOG_FILE, maxBytes=1*1024*1024, backupCount=3)]\n)\nlogger = logging.getLogger(__name__)\n\nCRITICAL_FILES = [\n    \"grok_local.py\", \"file_ops.py\", \"git_ops.py\", \"grok_checkpoint.py\",\n    \".gitignore\", \"grok.txt\", \"tests/test_grok_local.py\"\n]\n\ndef load_checkpoint():\n    \"\"\"Load the last checkpoint from file.\"\"\"\n    if os.path.exists(CHECKPOINT_FILE):\n        with open(CHECKPOINT_FILE, \"r\") as f:\n            return json.load(f)\n    return {}\n\ndef save_checkpoint(description):\n    \"\"\"Save a checkpoint with description, critical file contents, and safe/ files.\"\"\"\n    checkpoint = {\n        \"description\": description,\n        \"timestamp\": datetime.datetime.now().isoformat(),\n        \"files\": {},\n        \"safe_files\": {}\n    }\n    # Critical files\n    for filename in CRITICAL_FILES:\n        file_path = os.path.join(PROJECT_DIR, filename)\n        if os.path.exists(file_path):\n            with open(file_path, \"r\") as f:\n                checkpoint[\"files\"][filename] = f.read()\n        else:\n            checkpoint[\"files\"][filename] = \"File not found\"\n    # Safe directory files\n    if os.path.exists(SAFE_DIR):\n        for filename in os.listdir(SAFE_DIR):\n            file_path = os.path.join(SAFE_DIR, filename)\n            if os.path.isfile(file_path):\n                with open(file_path, \"r\") as f:\n                    checkpoint[\"safe_files\"][filename] = f.read()\n    with open(CHECKPOINT_FILE, \"w\") as f:\n        json.dump(checkpoint, f, indent=4)\n    logger.info(f\"Saved checkpoint with description: {description}\")\n    return f\"Checkpoint saved: {description}\"\n\ndef report_to_grok(response):\n    return response\n\ndef what_time_is_it():\n    now = datetime.datetime.now(datetime.timezone.utc)\n    time_str = now.strftime(\"%I:%M %p GMT, %B %d, %Y\")\n    logger.info(f\"Time requested: {time_str}\")\n    return time_str\n\ndef process_multi_command(request):\n    commands = request.split(\"&&\")\n    results = []\n    for cmd in commands:\n        cmd = cmd.strip()\n        if not cmd:\n            continue\n        result = ask_local(cmd)\n        results.append(result)\n    logger.info(f\"Processed multi-command: {request}\")\n    return \"\\n\".join(results)\n\ndef ask_local(request, debug=False):\n    request = request.strip().rstrip(\"?\")\n    if debug:\n        print(f\"Processing: {request}\")\n        logger.debug(f\"Debug processing: {request}\")\n    \n    if \"&&\" in request:\n        return process_multi_command(request)\n    \n    req_lower = request.lower()\n    if req_lower in [\"what time is it\", \"ask what time is it\"]:\n        return report_to_grok(what_time_is_it())\n    elif req_lower == \"list files\":\n        return report_to_grok(list_files())\n    elif req_lower.startswith(\"commit \"):\n        message = request[7:].strip() or \"Automated commit\"\n        return report_to_grok(git_commit_and_push(message))\n    elif req_lower == \"git status\":\n        return report_to_grok(git_status())\n    elif req_lower == \"git pull\":\n        return report_to_grok(git_pull())\n    elif req_lower.startswith(\"git log\"):\n        count = request[7:].strip()\n        count = int(count) if count.isdigit() else 1\n        return report_to_grok(git_log(count))\n    elif req_lower == \"git branch\":\n        return report_to_grok(git_branch())\n    elif req_lower.startswith(\"git checkout \"):\n        branch = request[12:].strip()\n        return report_to_grok(git_checkout(branch))\n    elif req_lower.startswith(\"git rm \"):\n        filename = request[6:].strip()\n        return report_to_grok(git_rm(filename))\n    elif req_lower.startswith(\"create file \"):\n        filename = request[11:].strip()\n        return report_to_grok(create_file(filename))\n    elif req_lower.startswith(\"delete file \"):\n        parts = request[11:].strip().split(\" --force\")\n        filename = parts[0].strip().replace(\"safe/\", \"\")\n        force = len(parts) > 1 and \"--force\" in request.lower()\n        return report_to_grok(delete_file(filename, force))\n    elif req_lower.startswith(\"move file \"):\n        parts = request[9:].strip().split(\" to \")\n        if len(parts) != 2:\n            logger.error(\"Invalid move command format\")\n            return \"Error: Invalid move command format. Use 'move file <src> to <dst>'\"\n        src, dst = parts\n        return report_to_grok(move_file(src.strip().replace(\"safe/\", \"\"), dst.strip().replace(\"safe/\", \"\")))\n    elif req_lower.startswith(\"copy file \"):\n        parts = request[9:].strip().split(\" to \")\n        if len(parts) != 2:\n            logger.error(\"Invalid copy command format\")\n            return \"Error: Invalid copy command format. Use 'copy file <src> to <dst>'\"\n        src, dst = parts\n        return report_to_grok(copy_file(src.strip().replace(\"safe/\", \"\"), dst.strip().replace(\"safe/\", \"\")))\n    elif req_lower.startswith(\"rename file \"):\n        parts = request[11:].strip().split(\" to \")\n        if len(parts) != 2:\n            logger.error(\"Invalid rename command format\")\n            return \"Error: Invalid rename command format. Use 'rename file <old> to <new>'\"\n        src, dst = parts\n        return report_to_grok(rename_file(src.strip().replace(\"safe/\", \"\"), dst.strip().replace(\"safe/\", \"\")))\n    elif req_lower.startswith(\"read file \"):\n        filename = request[9:].strip().replace(\"safe/\", \"\")\n        return report_to_grok(read_file(filename))\n    elif req_lower.startswith(\"write \"):\n        parts = request[5:].strip().split(\" to \")\n        if len(parts) != 2:\n            logger.error(\"Invalid write command format\")\n            return \"Error: Invalid write command format. Use 'write <content> to <filename>'\"\n        content, filename = parts\n        return report_to_grok(write_file(filename.strip().replace(\"safe/\", \"\"), content.strip()))\n    elif req_lower.startswith(\"checkpoint \"):\n        description = request[10:].strip()\n        if not description:\n            return \"Error: Checkpoint requires a description\"\n        return save_checkpoint(description)\n    else:\n        logger.warning(f\"Unknown command received: {request}\")\n        return f\"Unknown command: {request}\"\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Local Grok Agent\")\n    parser.add_argument(\"--ask\", type=str, help=\"Command to execute\")\n    parser.add_argument(\"--resume\", action=\"store_true\", help=\"Display last checkpoint\")\n    parser.add_argument(\"--debug\", action=\"store_true\", help=\"Enable debug output\")\n    args = parser.parse_args()\n\n    if args.resume:\n        checkpoint = load_checkpoint()\n        if checkpoint:\n            desc = checkpoint.get(\"description\", \"No description\")\n            time = checkpoint.get(\"timestamp\", \"Unknown\")\n            files = checkpoint.get(\"files\", {})\n            safe_files = checkpoint.get(\"safe_files\", {})\n            print(f\"Last Checkpoint:\\n- Description: {desc}\\n- Timestamp: {time}\\n- Files tracked: {', '.join(files.keys())}\")\n            if safe_files:\n                print(f\"- Safe files: {', '.join(safe_files.keys())}\")\n        else:\n            print(\"No checkpoint found.\")\n    elif args.ask:\n        print(ask_local(args.ask, args.debug))\n    else:\n        while True:\n            cmd = input(\"Command: \")\n            if cmd.lower() == \"exit\":\n                break\n            print(ask_local(cmd, args.debug))\n",
        "file_ops.py": "import os\nimport shutil\nimport re\nimport logging\n\nPROJECT_DIR = os.getcwd()\nSAFE_DIR = os.path.join(PROJECT_DIR, \"safe\")\nlogger = logging.getLogger(__name__)\n\nCRITICAL_FILES = {\"grok_local.py\", \"x_poller.py\", \".gitignore\"}\n\ndef sanitize_filename(filename):\n    \"\"\"Ensure filename is safe and within SAFE_DIR.\"\"\"\n    filename = re.sub(r'[<>:\"/\\|?*]', '', filename.strip())\n    full_path = os.path.join(SAFE_DIR, filename)\n    if not full_path.startswith(SAFE_DIR + os.sep):\n        logger.error(f\"Invalid filename attempt: {filename}\")\n        return None\n    if os.path.basename(filename) in CRITICAL_FILES:\n        logger.error(f\"Protected file access denied: {filename}\")\n        return None\n    return filename\n\ndef ensure_safe_dir():\n    \"\"\"Create SAFE_DIR if it doesn\u2019t exist.\"\"\"\n    if not os.path.exists(SAFE_DIR):\n        os.makedirs(SAFE_DIR)\n        logger.info(f\"Created safe directory: {SAFE_DIR}\")\n\ndef create_file(filename):\n    ensure_safe_dir()\n    filename = sanitize_filename(filename)\n    if not filename:\n        return \"Error: Invalid or protected filename\"\n    try:\n        with open(os.path.join(SAFE_DIR, filename), \"w\") as f:\n            f.write(\"\")\n        logger.info(f\"Created file: {filename}\")\n        return f\"Created file: {filename}\"\n    except Exception as e:\n        logger.error(f\"Error creating file {filename}: {e}\")\n        return f\"Error creating file: {e}\"\n\ndef delete_file(filename, force=False):\n    ensure_safe_dir()\n    filename = sanitize_filename(filename)\n    if not filename:\n        return \"Error: Invalid or protected filename\"\n    full_path = os.path.join(SAFE_DIR, filename)\n    if not os.path.exists(full_path):\n        logger.warning(f\"File not found for deletion: {filename}\")\n        return f\"File not found: {filename}\"\n    if not force and \"y\" != input(f\"Confirm deletion of {filename}? (y/n): \").lower():\n        logger.info(f\"Deletion of {filename} cancelled\")\n        return f\"Deletion cancelled: {filename}\"\n    try:\n        os.remove(full_path)\n        logger.info(f\"Deleted file: {filename}\")\n        return f\"Deleted file: {filename}\"\n    except Exception as e:\n        logger.error(f\"Error deleting file {filename}: {e}\")\n        return f\"Error deleting file: {e}\"\n\ndef move_file(src, dst):\n    ensure_safe_dir()\n    src = sanitize_filename(src)\n    dst = sanitize_filename(dst)\n    if not (src and dst):\n        return \"Error: Invalid or protected filename\"\n    src_path = os.path.join(SAFE_DIR, src)\n    dst_path = os.path.join(SAFE_DIR, dst)\n    if not os.path.exists(src_path):\n        logger.warning(f\"Source file not found: {src}\")\n        return f\"Source file not found: {src}\"\n    try:\n        shutil.move(src_path, dst_path)\n        logger.info(f\"Moved {src} to {dst}\")\n        return f\"Moved {src} to {dst}\"\n    except Exception as e:\n        logger.error(f\"Error moving file {src} to {dst}: {e}\")\n        return f\"Error moving file: {e}\"\n\ndef copy_file(src, dst):\n    ensure_safe_dir()\n    src = sanitize_filename(src)\n    dst = sanitize_filename(dst)\n    if not (src and dst):\n        return \"Error: Invalid or protected filename\"\n    src_path = os.path.join(SAFE_DIR, src)\n    dst_path = os.path.join(SAFE_DIR, dst)\n    if not os.path.exists(src_path):\n        logger.warning(f\"Source file not found: {src}\")\n        return f\"Source file not found: {src}\"\n    try:\n        shutil.copy(src_path, dst_path)\n        logger.info(f\"Copied {src} to {dst}\")\n        return f\"Copied {src} to {dst}\"\n    except Exception as e:\n        logger.error(f\"Error copying file {src} to {dst}: {e}\")\n        return f\"Error copying file: {e}\"\n\ndef rename_file(src, dst):\n    return move_file(src, dst)  # Alias move for clarity\n\ndef read_file(filename):\n    ensure_safe_dir()\n    filename = sanitize_filename(filename)\n    if not filename:\n        return \"Error: Invalid or protected filename\"\n    full_path = os.path.join(SAFE_DIR, filename)\n    if not os.path.exists(full_path):\n        logger.warning(f\"File not found for reading: {filename}\")\n        return f\"File not found: {filename}\"\n    try:\n        with open(full_path, \"r\") as f:\n            content = f.read()\n        logger.info(f\"Read file: {filename}\")\n        return f\"Content of {filename}: {content}\"\n    except Exception as e:\n        logger.error(f\"Error reading file {filename}: {e}\")\n        return f\"Error reading file: {e}\"\n\ndef write_file(filename, content):\n    ensure_safe_dir()\n    filename = sanitize_filename(filename)\n    if not filename:\n        return \"Error: Invalid or protected filename\"\n    full_path = os.path.join(SAFE_DIR, filename)\n    try:\n        with open(full_path, \"w\") as f:\n            f.write(content)\n        logger.info(f\"Wrote to {filename}: {content}\")\n        return f\"Wrote to {filename}: {content}\"\n    except Exception as e:\n        logger.error(f\"Error writing file {filename}: {e}\")\n        return f\"Error writing file: {e}\"\n\ndef list_files():\n    ensure_safe_dir()\n    try:\n        files = os.listdir(SAFE_DIR)\n        logger.info(\"Listed files in safe directory\")\n        return \"\\n\".join(files) if files else \"No files in safe directory\"\n    except Exception as e:\n        logger.error(f\"Error listing files: {e}\")\n        return f\"Error listing files: {e}\"\n",
        "git_ops.py": "import os\nimport git\nfrom git import Repo\nimport logging\n\nPROJECT_DIR = os.getcwd()\nlogger = logging.getLogger(__name__)\n\ndef git_status():\n    try:\n        repo = Repo(PROJECT_DIR)\n        status = repo.git.status()\n        logger.info(\"Retrieved git status\")\n        return status\n    except Exception as e:\n        logger.error(f\"Git status error: {e}\")\n        return f\"Git status error: {e}\"\n\ndef git_pull():\n    try:\n        repo = Repo(PROJECT_DIR)\n        repo.git.pull()\n        logger.info(\"Pulled latest changes\")\n        return \"Pulled latest changes\"\n    except Exception as e:\n        logger.error(f\"Git pull error: {e}\")\n        return f\"Git pull error: {e}\"\n\ndef git_log(count=1):\n    try:\n        repo = Repo(PROJECT_DIR)\n        log = repo.git.log(f\"-{count}\")\n        logger.info(f\"Retrieved git log with count {count}\")\n        return log\n    except Exception as e:\n        logger.error(f\"Git log error: {e}\")\n        return f\"Git log error: {e}\"\n\ndef git_branch():\n    try:\n        repo = Repo(PROJECT_DIR)\n        branches = repo.git.branch()\n        logger.info(\"Listed git branches\")\n        return branches\n    except Exception as e:\n        logger.error(f\"Git branch error: {e}\")\n        return f\"Git branch error: {e}\"\n\ndef git_checkout(branch):\n    try:\n        repo = Repo(PROJECT_DIR)\n        repo.git.checkout(branch)\n        logger.info(f\"Checked out branch: {branch}\")\n        return f\"Checked out branch: {branch}\"\n    except Exception as e:\n        logger.error(f\"Git checkout error: {e}\")\n        return f\"Git checkout error: {e}\"\n\ndef git_commit_and_push(message=\"Automated commit\"):\n    repo = Repo(PROJECT_DIR)\n    try:\n        repo.git.add(A=True)\n        status = repo.git.status()\n        if \"nothing to commit\" in status:\n            logger.info(\"Nothing to commit\")\n            return \"Nothing to commit\"\n        repo.git.commit(m=message)\n        repo.git.push()\n        logger.info(f\"Committed and pushed: {message}\")\n        return f\"Committed and pushed: {message}\"\n    except git.GitCommandError as e:\n        logger.error(f\"Git error: {e}\")\n        return f\"Git error: {str(e)}\"\n\ndef git_rm(filename):\n    try:\n        repo = Repo(PROJECT_DIR)\n        repo.git.rm(filename)\n        logger.info(f\"Removed file from git: {filename}\")\n        return f\"Removed file from git: {filename}\"\n    except git.GitCommandError as e:\n        logger.error(f\"Git rm error for {filename}: {e}\")\n        return f\"Git rm error: {str(e)}\"\n",
        "grok_checkpoint.py": "import os\nimport subprocess\nimport sys\n\nPROJECT_DIR = os.path.dirname(os.path.abspath(__file__))\nos.chdir(PROJECT_DIR)\n\ndef start_session(command=None, resume=False):\n    \"\"\"Start a grok-local session, either interactive, with a command, or resuming.\"\"\"\n    args = [\"python\", \"grok_local.py\"]\n    if resume:\n        args.append(\"--resume\")\n    elif command:\n        args.extend([\"--ask\", command])\n    \n    result = subprocess.run(\n        args,\n        capture_output=True,\n        text=True\n    )\n    print(result.stdout.strip())\n    if result.stderr:\n        print(f\"Error: {result.stderr.strip()}\", file=sys.stderr)\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1:\n        if \"--resume\" in sys.argv:\n            start_session(resume=True)\n        else:\n            start_session(\" \".join(sys.argv[1:]))\n    else:\n        start_session()\n",
        ".gitignore": "misc/\n*.log\n*.log.*\ncookies.pkl\n__pycache__/\ndebug/\ncode_blocks/\nlast_processed.txt\n.DS_Store\nsafe/\n",
        "grok.txt": "I am Grok, master of the repo",
        "tests/test_grok_local.py": "File not found"
    },
    "safe_files": {
        "plan_v1.txt": "Updated project plan v1",
        "renamed.txt": "",
        "plan_original.txt": "Initial project plan"
    }
}